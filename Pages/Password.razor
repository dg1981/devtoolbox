@page "/password"
@using System.Globalization
@using System.Security.Cryptography
@using CurrieTechnologies.Razor.Clipboard
@using Humanizer
@inject ClipboardService clipboard
@inject IJSRuntime jsRunTime

<div>
    <div class="row mb-5">
        <div class="col-sm-6 mt-3">
            <h3>
                <a class="nav-link d-sm-inline" data-widget="pushmenu" href="#">
                    <i class="fas fa-bars"></i>
                </a>Password Generator
            </h3>
        </div>
    </div>
    <div class="row">

        <div class="col-10 offset-1">
            <div class="card">
                <div class="card-header border-0">
                </div>
                <div class="card-body">

                    <div class="position-relative mb-4">
                        <div class="row">
                            <div class="col-10 offset-1">
                                <h6 class="text-muted">Hit Generate or type in to check password:</h6>
                                <div class="input-group input-group-lg mb-5">
                                    <input @bind="Pwd" @bind:event="oninput" id="pwdBox" class=" form-control text-monospace text-center" spellcheck="false" />
                                    <span class="input-group-append">
                                        <button type="button" class="btn btn-warning btn-flat" @onclick="GeneratePassword">
                                            <i class="fas fa-redo-alt"></i>  Generate
                                        </button>
                                        <button type="button" class="btn btn-secondary btn-flat" @onclick="@(() => CopyToClipboard())">
                                            <i class="fas fa-copy"></i>
                                        </button>


                                    </span>
                                </div>


                            </div>

                        </div>
                        <div class="row">
                            <div class="col-3 offset-2 text-center">

                                @* <input type="range" min="1" max="50" step="1"  @bind="PwdLength" @bind:event="oninput" /> *@
                                <div class="form-group">
                                    <input type="range" min="1" max="50" step="1" value="12" @oninput="(e) => Changed_Length(e)" />

                                    <div class="size-label text-bold">
                                        Length: @(PwdLength)
                                    </div>
                                </div>
                            </div>
                            <div class="col-3">
                                <div class="form-group">
                                    <div class="custom-control custom-switch">
                                        <input type="checkbox" class="custom-control-input" checked @onchange="(e) => CB_Changed_IncludeLowerCase(e)" id="IncludeLowerCase">
                                        <label class="custom-control-label" for="IncludeLowerCase">Lower Case</label>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="custom-control custom-switch">
                                        <input type="checkbox" class="custom-control-input" checked @onchange="(e) => CB_Changed_IncludeUpperCase(e)" id="IncludeUpperCase">
                                        <label class="custom-control-label" for="IncludeUpperCase">Upper Case</label>
                                    </div>
                                </div>
                            </div>

                            <div class="col-3">

                                <div class="form-group">
                                    <div class="custom-control custom-switch">
                                        <input type="checkbox" class="custom-control-input" checked @onchange="(e) => CB_Changed_IncludeNumbers(e)" id="IncludeNumbers">
                                        <label class="custom-control-label" for="IncludeNumbers">Numbers</label>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="custom-control custom-switch">
                                        <input type="checkbox" class="custom-control-input" @onchange="(e) => CB_Changed_IncludeSymbols(e)" id="IncludeSymbols">
                                        <label class="custom-control-label" for="IncludeSymbols">Symbols</label>
                                    </div>
                                </div>

                            </div>

                        </div>
                    </div>


                </div>
                <div class="card-footer">
                    <div class="row">
                        <div class="col-sm-6 col-6">
                            <div class="description-block border-right">                               
                                <h5 class="description-header">@SearchSpaceDepthStr = @SearchSpaceDepth</h5>
                                <span class="description-text">Search Space Depth</span>
                            </div>
                            <!-- /.description-block -->
                        </div>
                        <!-- /.col -->
                        <div class="col-sm-6 col-6">
                            <div class="description-block border-right">                                
                                <h5 class="description-header">@SearchSpaceSize</h5>
                                <span class="description-text">Search Space Size</span>
                            </div>
                            <!-- /.description-block -->
                        </div>

                        <!-- /.row -->
                    </div>
                </div>
                <div class="card-footer">
                    <div class="row">
                        <!-- /.col -->
                        <div class="col-sm-4 col-6">
                            <div class="description-block border-right">                               
                                <h5 class="description-header  @OnlineAttackClass">@OnlineAttack</h5>
                                <h4 class="description-text">Online Attack</h4>
                                <div class="text-muted well well-sm shadow-none">@@1000 guesses/second</div>
                            </div>
                            <!-- /.description-block -->
                        </div>
                        <!-- /.col -->
                        <div class="col-sm-4 col-6">
                            <div class="description-block">
                                <h5 class="description-header @OfflineAttackClass">@OfflineAttack</h5>
                                <h4 class="description-text">Offline Fast Attack</h4>
                                <div class="text-muted well well-sm shadow-none">@@100 Billion guesses/second</div>
                            </div>
                            <!-- /.description-block -->
                        </div>
                        <div class="col-sm-4 col-6">
                            <div class="description-block">                            
                                <h5 class="description-header @GridAttackClass">@GridAttack</h5>
                                <h4 class="description-text">Massive Cracking System</h4>
                                <div class="text-muted well well-sm shadow-none">@@100 Trillion guesses/second</div>
                            </div>
                            <!-- /.description-block -->
                        </div>
                    </div>
                    <!-- /.row -->
                </div>
            </div>
        </div>
    </div>
</div>


@code {

    // Define supported password characters divided into groups.
    // You can add (or remove) characters to (from) these groups.
    private const string PASSWORD_CHARS_LCASE = "abcdefgijkmnpqrstwxyz";
    private const string PASSWORD_CHARS_UCASE = "ABCDEFGHJKLMNPQRSTWXYZ";
    private const string PASSWORD_CHARS_NUMERIC = "23456789";
    private const string PASSWORD_CHARS_SPECIAL = "*$-+?_'(),.:;=!%{}/#@[]~^|";

    private int PwdLength { get; set; } = 14;
    private bool IncludeNumbers { get; set; } = true;
    private bool IncludeUpperCase { get; set; } = true;
    public bool IncludeLowerCase { get; set; } = true;
    private bool IncludeSymbols { get; set; } = false;

    private string SearchSpaceDepthStr { get; set; }
    private int SearchSpaceDepth { get; set; }
    private string SearchSpaceSize { get; set; }
    private string OnlineAttack { get; set; }
    private string OfflineAttack { get; set; }
    private string GridAttack { get; set; }

    private string OnlineAttackClass { get; set; }
    private string OfflineAttackClass { get; set; }
    private string GridAttackClass { get; set; }

    private string pwd;
    public string Pwd
    {
        get { return pwd; }
        set
        {
            pwd = value;
            PwdLength = value.Length;

            IncludeNumbers = false;
            IncludeSymbols = false;
            IncludeUpperCase = false;
            IncludeLowerCase = false;

            foreach (var c in pwd)
            {
                if (char.IsUpper(c)) IncludeUpperCase = true;
                else if (char.IsDigit(c)) IncludeNumbers = true;
                else if (char.IsLower(c)) IncludeLowerCase = true;
                else IncludeSymbols = true;
            }

            jsRunTime.InvokeAsync<int>("dgFunctions.SetCheckBox", "#IncludeLowerCase", IncludeLowerCase);
            jsRunTime.InvokeAsync<int>("dgFunctions.SetCheckBox", "#IncludeUpperCase", IncludeUpperCase);
            jsRunTime.InvokeAsync<int>("dgFunctions.SetCheckBox", "#IncludeNumbers", IncludeNumbers);
            jsRunTime.InvokeAsync<int>("dgFunctions.SetCheckBox", "#IncludeSymbols", IncludeSymbols);

            UpdateStats();
        }
    }

    protected override void OnInitialized()
    {
        GeneratePassword();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await jsRunTime.InvokeVoidAsync("setTitle", "Password - DevGearApp");
    }

    private void Changed_Length(ChangeEventArgs e)
    {
        PwdLength = Convert.ToInt32(e.Value);
        GeneratePassword();
    }

    private void CB_Changed_IncludeNumbers(ChangeEventArgs e)
    {
        IncludeNumbers = Convert.ToBoolean(e.Value);
        GeneratePassword();
    }

    private void CB_Changed_IncludeLowerCase(ChangeEventArgs e)
    {
        IncludeLowerCase = Convert.ToBoolean(e.Value);
        GeneratePassword();
    }

    private void CB_Changed_IncludeUpperCase(ChangeEventArgs e)
    {
        IncludeUpperCase = Convert.ToBoolean(e.Value);
        GeneratePassword();
    }

    private void CB_Changed_IncludeSymbols(ChangeEventArgs e)
    {
        IncludeSymbols = Convert.ToBoolean(e.Value);
        GeneratePassword();
    }

    private void GeneratePassword()
    {
        // This array will hold password characters.
        char[] password = null;

        try
        {
            if (!IncludeLowerCase && !IncludeUpperCase && !IncludeNumbers && !IncludeSymbols)
            {
                IncludeLowerCase = true;
                jsRunTime.InvokeAsync<int>("dgFunctions.SetCheckBox", "#IncludeLowerCase", IncludeLowerCase);
            }

            //https://stackoverflow.com/a/54994/233431

            // Create a local array containing supported password characters
            // grouped by types. You can remove character groups from this
            // array, but doing so will weaken the password strength.
            List<char[]> charGroupsList = new List<char[]>();

            if (IncludeLowerCase)
                charGroupsList.Add(PASSWORD_CHARS_LCASE.ToCharArray());

            if (IncludeUpperCase)
                charGroupsList.Add(PASSWORD_CHARS_UCASE.ToCharArray());

            if (IncludeNumbers)
                charGroupsList.Add(PASSWORD_CHARS_NUMERIC.ToCharArray());

            if (IncludeSymbols)
                charGroupsList.Add(PASSWORD_CHARS_SPECIAL.ToCharArray());

            char[][] charGroups = charGroupsList.ToArray();

            // Use this array to track the number of unused characters in each
            // character group.
            int[] charsLeftInGroup = new int[charGroups.Length];

            // Initially, all characters in each group are not used.
            for (int i = 0; i < charsLeftInGroup.Length; i++)
                charsLeftInGroup[i] = charGroups[i].Length;

            // Use this array to track (iterate through) unused character groups.
            int[] leftGroupsOrder = new int[charGroups.Length];

            // Initially, all character groups are not used.
            for (int i = 0; i < leftGroupsOrder.Length; i++)
                leftGroupsOrder[i] = i;

            // Because we cannot use the default randomizer, which is based on the
            // current time (it will produce the same "random" number within a
            // second), we will use a random number generator to seed the
            // randomizer.

            // Use a 4-byte array to fill it with random bytes and convert it then
            // to an integer value.
            byte[] randomBytes = new byte[4];

            // Generate 4 random bytes.
            RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
            rng.GetBytes(randomBytes);

            // Convert 4 bytes into a 32-bit integer value.
            int seed = BitConverter.ToInt32(randomBytes, 0);

            // Now, this is real randomization.
            Random random = new Random(seed);

            password = new char[PwdLength];

            // Index of the next character to be added to password.
            int nextCharIdx;

            // Index of the next character group to be processed.
            int nextGroupIdx;

            // Index which will be used to track not processed character groups.
            int nextLeftGroupsOrderIdx;

            // Index of the last non-processed character in a group.
            int lastCharIdx;

            // Index of the last non-processed group.
            int lastLeftGroupsOrderIdx = leftGroupsOrder.Length - 1;

            // Generate password characters one at a time.
            for (int i = 0; i < password.Length; i++)
            {
                // If only one character group remained unprocessed, process it;
                // otherwise, pick a random character group from the unprocessed
                // group list. To allow a special character to appear in the
                // first position, increment the second parameter of the Next
                // function call by one, i.e. lastLeftGroupsOrderIdx + 1.
                if (lastLeftGroupsOrderIdx == 0)
                    nextLeftGroupsOrderIdx = 0;
                else
                    nextLeftGroupsOrderIdx = random.Next(0,
                        lastLeftGroupsOrderIdx);

                // Get the actual index of the character group, from which we will
                // pick the next character.
                nextGroupIdx = leftGroupsOrder[nextLeftGroupsOrderIdx];

                // Get the index of the last unprocessed characters in this group.
                lastCharIdx = charsLeftInGroup[nextGroupIdx] - 1;

                // If only one unprocessed character is left, pick it; otherwise,
                // get a random character from the unused character list.
                if (lastCharIdx == 0)
                    nextCharIdx = 0;
                else
                    nextCharIdx = random.Next(0, lastCharIdx + 1);

                // Add this character to the password.
                password[i] = charGroups[nextGroupIdx][nextCharIdx];

                // If we processed the last character in this group, start over.
                if (lastCharIdx == 0)
                    charsLeftInGroup[nextGroupIdx] =
                        charGroups[nextGroupIdx].Length;
                // There are more unprocessed characters left.
                else
                {
                    // Swap processed character with the last unprocessed character
                    // so that we don't pick it until we process all characters in
                    // this group.
                    if (lastCharIdx != nextCharIdx)
                    {
                        char temp = charGroups[nextGroupIdx][lastCharIdx];
                        charGroups[nextGroupIdx][lastCharIdx] =
                            charGroups[nextGroupIdx][nextCharIdx];
                        charGroups[nextGroupIdx][nextCharIdx] = temp;
                    }
                    // Decrement the number of unprocessed characters in
                    // this group.
                    charsLeftInGroup[nextGroupIdx]--;
                }

                // If we processed the last group, start all over.
                if (lastLeftGroupsOrderIdx == 0)
                    lastLeftGroupsOrderIdx = leftGroupsOrder.Length - 1;
                // There are more unprocessed groups left.
                else
                {
                    // Swap processed group with the last unprocessed group
                    // so that we don't pick it until we process all groups.
                    if (lastLeftGroupsOrderIdx != nextLeftGroupsOrderIdx)
                    {
                        int temp = leftGroupsOrder[lastLeftGroupsOrderIdx];
                        leftGroupsOrder[lastLeftGroupsOrderIdx] =
                            leftGroupsOrder[nextLeftGroupsOrderIdx];
                        leftGroupsOrder[nextLeftGroupsOrderIdx] = temp;
                    }
                    // Decrement the number of unprocessed groups.
                    lastLeftGroupsOrderIdx--;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

        Pwd = new string(password);
        UpdateStats();
    }


    public async Task<bool> CopyToClipboard()
    {
        try
        {
            await clipboard.WriteTextAsync(Pwd);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        return true;
    }

    private void UpdateStats()
    {
        List<int> s = new List<int>();
        if (IncludeLowerCase) s.Add(26);
        if (IncludeUpperCase) s.Add(26);
        if (IncludeNumbers) s.Add(10);
        if (IncludeSymbols) s.Add(33);

        SearchSpaceDepthStr = string.Join("+", s);
        SearchSpaceDepth = s.Sum();

        double searchSpaceSize = 0;
        for (int i = 1; i <= PwdLength; i++)
        {
            searchSpaceSize += Math.Pow(SearchSpaceDepth, i);
        }

        if (searchSpaceSize > 1e17)
            SearchSpaceSize = searchSpaceSize.ToString("G5");
        else
            SearchSpaceSize = String.Format("{0:#,##0}", searchSpaceSize);

        double onlineRate = 1000;
        double offlineRate = 100 * double.Parse("1e9"); //100 billion
        double gridRate = 100 * double.Parse("1e12"); //100 trillion

        double onlineTs = searchSpaceSize / onlineRate;
        OnlineAttack = GetReadableTimeSeconds(onlineTs);
        OnlineAttackClass = DisplayClass(onlineTs);

        double offlineTs = searchSpaceSize / offlineRate;
        OfflineAttack = GetReadableTimeSeconds(offlineTs);
        OfflineAttackClass = DisplayClass(offlineTs);

        double gridTs = searchSpaceSize / gridRate;
        GridAttack = GetReadableTimeSeconds(gridTs);
        GridAttackClass = DisplayClass(gridTs);
    }

    string DisplayClass(double ts)
    {
        return (ts / (TimeSpan.FromDays(365).TotalSeconds * 100)) > 1 ? "text-success" : "text-danger";
    }

    string GetReadableTimeSeconds(double seconds)
    {
        if (seconds/1000 <  60*60*24*365)
        {
            return TimeSpan.FromSeconds(seconds).Humanize(3,maxUnit: Humanizer.Localisation.TimeUnit.Year);
        }


        var t = seconds / TimeSpan.FromDays(365).TotalSeconds / 100;
        string s = "";// t.ToString()[0] + "." + t.ToString()[1] + t.ToString()[2] + " ";

        while (true)
        {
            if(t >= 1e12)
            {
                s = "trillion " + s;
                t = t / 1e12;
                continue;
            }

            if (t >= 1e9)
            {
                s = "billion " + s;
                t = t / 1e9;
                continue;
            }

            if (t >= 1e6)
            {
                s = "million " + s;
                t = t / 1e6;
                continue;
            }

            if (t >= 1e3)
            {
                s = "thousand " + s;
                t = t / 1e3;
                continue;
            }



            s = decimal.Round((decimal)t, 2) + " " + s;

            //if (t > 1e3)
            //{
            //    s = "hundred " + s;
            //    t = t / 1e2;
            //    continue;
            //}

            break;
        }


        //   seconds = seconds / double.Parse("60*60*24*365*100");
        //while(seconds / 1e15 != 0)
        //{
        //    seconds = seconds / 1e15;
        //    s = "quadrillion" + s;
        //}
        return s + "centuries";
    }

    public string GetReadableTimespan(TimeSpan ts)
    {
        int years = ts.Days / 365; //no leap year accounting
        int months = (ts.Days % 365) / 30; //naive guess at month size
        int weeks = ((ts.Days % 365) % 30) / 7;
        int days = (((ts.Days % 365) % 30) % 7);

        StringBuilder sb = new StringBuilder();
        if (years > 0)
        {
            sb.Append(years.ToString() + " years, ");
        }
        if (months > 0)
        {
            sb.Append(months.ToString() + " months, ");
        }
        if (weeks > 0)
        {
            sb.Append(weeks.ToString() + " weeks, ");
        }
        if (days > 0)
        {
            sb.Append(days.ToString() + " days.");
        }
        return sb.ToString();
    }

}
